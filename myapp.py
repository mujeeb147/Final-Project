# -*- coding: utf-8 -*-
"""MyApp

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1X-id5AnjqeIaq-a0IN3LT3KL5IWFcQf6
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import plotly.express as px

# Streamlit page config
st.set_page_config(page_title="Insurance Website Dashboard", layout="wide")

# Load dataset
df = pd.read_csv('insurance.data.aggregated.csv')

# Clean column names if needed
df.columns = [
    'Channel', 'Device', 'Users', 'Pages / Session', 'Avg. Session Duration',
    'Revenue', 'Quotes', 'Purchases'
]

# Sidebar â€” Dynamic filtering
st.sidebar.header("ðŸ”Ž Filter the Data")

channel_options = df['Channel'].unique()
selected_channels = st.sidebar.multiselect('Select Marketing Channels', channel_options)

device_options = df['Device'].unique()
selected_devices = st.sidebar.multiselect('Select Device Types', device_options)

# Apply filters
filtered_df = df.copy()
if selected_channels:
    filtered_df = filtered_df[filtered_df['Channel'].isin(selected_channels)]

if selected_devices:
    filtered_df = filtered_df[filtered_df['Device'].isin(selected_devices)]

# Title and KPIs
st.title("ðŸ’¼ Insurance Website Performance Dashboard")
st.markdown("Explore user behavior, conversions, and marketing effectiveness on the insurance companyâ€™s website.")

col1, col2, col3 = st.columns(3)
col1.metric("Total Users", f"{filtered_df['Users'].sum():,}")
col2.metric("Total Quotes", f"{filtered_df['Quotes'].sum():,}")
col3.metric("Total Purchases", f"{filtered_df['Purchases'].sum():,}")

col4, col5 = st.columns(2)
col4.metric("Total Revenue", f"${filtered_df['Revenue'].sum():,.2f}")
col5.metric("Avg. Pages/Session", f"{filtered_df['Pages / Session'].mean():.2f}")

st.markdown("---")

# --- PIE CHART: Users by Channel ---
st.header("ðŸ“Š Visual Data Insights")
st.markdown("### ðŸ“˜ This pie chart shows the proportion of users from each marketing channel.")
channel_users = filtered_df.groupby("Channel")["Users"].sum()
fig1, ax1 = plt.subplots()
ax1.pie(
    channel_users,
    labels=channel_users.index,
    autopct='%1.1f%%',
    startangle=90,
    textprops={'fontsize': 12}
)
ax1.axis('equal')
st.pyplot(fig1)

# --- TREEMAP: Purchases by Channel and Device ---
st.markdown("### ðŸ“˜ This treemap displays purchases split by channel and device type.")
st.subheader("ðŸ§­ Treemap of Purchases by Channel and Device")
fig_treemap = px.treemap(
    filtered_df,
    path=['Channel', 'Device'],
    values='Purchases',
    color='Purchases',
    color_continuous_scale='Greens'
)
st.plotly_chart(fig_treemap, use_container_width=True)

# --- BAR CHART: Top Channels by Revenue ---
st.markdown("### ðŸ“˜ This bar chart shows which marketing channels drive the most revenue.")
st.subheader("ðŸ’° Revenue by Marketing Channel")
top_revenue = filtered_df.groupby("Channel")["Revenue"].sum().sort_values()
fig2, ax2 = plt.subplots()
top_revenue.plot(kind='barh', ax=ax2, color='navy')
ax2.set_xlabel("Revenue ($)")
ax2.set_ylabel("Marketing Channel")
st.pyplot(fig2)

# --- BAR CHART: Quotes by Device Type ---
st.markdown("### ðŸ“˜ This chart shows how users on different devices request quotes.")
st.subheader("ðŸ“± Quotes by Device Type")
device_quotes = filtered_df.groupby("Device")["Quotes"].sum().sort_values()
fig3, ax3 = plt.subplots()
device_quotes.plot(kind='barh', ax=ax3, color='darkorange')
ax3.set_xlabel("Number of Quotes")
ax3.set_ylabel("Device Type")
st.pyplot(fig3)

# --- FILTERED DATA TABLE ---
st.markdown("---")
st.header("ðŸ“„ View Filtered Data")
st.markdown("### ðŸ“˜ This table shows the full records based on your selected filters.")
st.dataframe(filtered_df)

# Footer
st.markdown("---")