# -*- coding: utf-8 -*-
"""MyApp

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1X-id5AnjqeIaq-a0IN3LT3KL5IWFcQf6
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import plotly.express as px

# Streamlit page config
st.set_page_config(page_title="Insurance Website Analytics Dashboard", layout="wide")

# Load data
df = pd.read_csv("insurance.data.aggregated.csv")

# Clean column names
df.columns = ['Marketing Channel', 'Device Category', 'Users', 'Pages / Session', 'Avg. Session Duration']

# Basic cleanup (optional)
df['Marketing Channel'] = df['Marketing Channel'].str.strip()
df['Device Category'] = df['Device Category'].str.strip()

# Sidebar — Filter
st.sidebar.header("🔎 Filter the Data")

channel_options = df['Marketing Channel'].unique()
selected_channels = st.sidebar.multiselect("Select Marketing Channels", channel_options, default=list(channel_options))

device_options = df['Device Category'].unique()
selected_devices = st.sidebar.multiselect("Select Device Categories", device_options, default=list(device_options))

# Apply filters
filtered_df = df.copy()

if selected_channels:
    filtered_df = filtered_df[filtered_df['Marketing Channel'].isin(selected_channels)]

if selected_devices:
    filtered_df = filtered_df[filtered_df['Device Category'].isin(selected_devices)]

# Title & Description
st.title("📊 Insurance Website Analytics Dashboard")
st.markdown("Analyze user behavior on the insurance website based on marketing channels and device categories.")

# KPIs
col1, col2, col3 = st.columns(3)
col1.metric("Total Users", int(filtered_df['Users'].sum()))
col2.metric("Avg. Pages / Session", round(filtered_df['Pages / Session'].mean(), 2))
col3.metric("Avg. Session Duration (sec)", round(filtered_df['Avg. Session Duration'].mean(), 2))

st.markdown("---")

# PIE CHART — User Distribution by Device
st.header("📊 Visual Insights")
st.markdown("### 📘 This pie chart shows the distribution of users by device category.")
device_counts = filtered_df.groupby('Device Category')['Users'].sum()
fig1, ax1 = plt.subplots()
ax1.pie(device_counts, labels=device_counts.index, autopct='%1.1f%%', startangle=90, textprops={'fontsize': 12})
ax1.axis('equal')
st.pyplot(fig1)

# TREEMAP — Users by Channel
st.markdown("### 📘 This treemap shows the number of users from each marketing channel.")
st.subheader("📈 Treemap of Users by Marketing Channel")
tree_df = filtered_df.groupby('Marketing Channel')['Users'].sum().reset_index()
fig2 = px.treemap(tree_df, path=['Marketing Channel'], values='Users', color='Users', color_continuous_scale='Blues')
st.plotly_chart(fig2, use_container_width=True)

# BAR CHART — Avg. Session Duration by Channel
st.markdown("### 📘 This chart shows the average session duration per marketing channel.")
st.subheader("⏱️ Avg. Session Duration by Marketing Channel")
duration_df = filtered_df.groupby('Marketing Channel')['Avg. Session Duration'].mean().sort_values(ascending=False)
fig3, ax3 = plt.subplots()
duration_df.plot(kind='bar', ax=ax3, color='teal')
ax3.set_xlabel("Marketing Channel")
ax3.set_ylabel("Avg. Session Duration (sec)")
ax3.set_title("Average Session Duration by Channel")
ax3.tick_params(axis='x', rotation=45)
st.pyplot(fig3)

# SCATTER PLOT — Pages/Session vs Duration
st.markdown("### 📘 This scatterplot shows how session duration relates to pages viewed per session.")
st.subheader("📌 Pages / Session vs. Avg. Session Duration")
fig4 = px.scatter(filtered_df,
                  x='Pages / Session',
                  y='Avg. Session Duration',
                  size='Users',
                  color='Marketing Channel',
                  hover_data=['Device Category'],
                  title="Pages per Session vs Session Duration")
st.plotly_chart(fig4, use_container_width=True)

# FILTERED DATA TABLE
st.markdown("---")
st.header("📄 Filtered Data Table")
st.markdown("### 📘 This table shows the data based on your selected filters.")
st.dataframe(filtered_df)

# Footer
st.markdown("---")